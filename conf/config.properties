sewer.source=pixel(80)
sewer.sink=meter("events") > roll(30) > defer > rabbitseqfile('hdfs://nameservice1/test/var/bap/collect4/%{yyyy-MM-dd/HH00}/%{yyyyMMdd-HHmmss}-%{host}-%{rand}')

sewer.source.pixel.extractor=com.evidon.nerf.sewer.AnonAccessLogV3Extractor
sewer.source.pixel.disable_keepalive_threshold=1000
sewer.source.pixel.max_idle=65000

# when using the 'reliable' sink, this path will be written to.
# the user running sewer must have read/write permissions to this path.
sewer.wal.path=/mnt/sewer/wal

# metrics collection via graphite
# the hostname will automatically be appended to the given prefix
sewer.metrics.graphite.host=graphite.evidon.com
#sewer.metrics.graphite.port=2003
sewer.metrics.graphite.prefix=prod.pipeline.sewage.

# type of compression to use for writing to file/hdfs streams
# valid options: deflate (zlib), gzip, bzip2, snappy
# note: snappy is only available in newer versions of hadoop
# default: gzip (if hadoop native is available), else deflate
#sewer.sink.compression=gzip


# good default buffer size for hadoop read/write buffers
# haven't seen much/any improvement w/ larger buffers
#io.file.buffer.size=65536


# source options:
#
# pixel(port)
# syslog(port)
# pipe('filename')
# tcpwrite(port)


# sink options:
#
# seqfile('hdfs://localhost:9000/test/collect/%{yyyy-MM-dd/HH00}/data-%{host}-%{yyyyMMdd-HHmmss}')
# seqfile('file:///opt/sewer/collect/%{yyyy-MM-dd/HH00}/data-%{host}-%{yyyyMMdd-HHmmss}')
# reliableseq('hdfs://localhost:9000/test/collect/%{yyyy-MM-dd/HH00}/data-%{host}-%{yyyyMMdd-HHmmss}')
# dfs("path")
# tcpwrite("host", port)
# buffer
# buffer_pool(size)
# local_buffer(size)
# roll(sec)
# reliable
#
# primarily for testing:
#
# null
# delayed_open


# file bucketing options:
#
# patterns must be enclosed with the special marker %{} and
# must match the following regex: [\w-./]+
# e.g.: A-Z a-z 0-9 _ - . /
#
# patterns consist primarily of standard SimpleDateFormat tokens:
#
#   http://www.docjar.com/docs/api/java/text/SimpleDateFormat.html
#
# common examples:
#
#   %{yyyy-MM-dd/HH00} => 2012-01-20/1300
#   %{yyyyMMdd-HHmmss} => 20120120-133254
#
# the following special variables are also available:
#
# host      - hostname
# rand      - random integer
# nanos     - system time in nanosec
# timestmap - system time in millisec
# thread    - thread id
#
# NOTE: special variables must *not* be combined with standard date/time
#       patterns.




# advanced pixel source options:

# The port on which to run the status server (responds with HTTP status code 200)
# By default, this is dynamically computed as the listening port + 1
# (e.g., if port is set to 80, then status port is 81)
#sewer.source.pixel.status.port=

# graceful shutdown timeout
# default: 1000
#sewer.source.pixel.graceful=1000

# jetty connetor acceptQueueSize = Number of connection requests that can be
# queued up before the operating system starts to send rejections.
# default: 100
sewer.source.pixel.accept_queue=0

# Use a custom extractor/event class
#sewer.source.pixel.extractor=<class name>

# Whether or not to allow keepalive connections. Set to "false" to disable.
# default: true
#sewer.source.pixel.keepalive=true

# Set the maximum Idle time for a connection, which roughly translates to the
# Socket.setSoTimeout(int) call, although with NIO implementations other
# mechanisms may be used to implement the timeout.
#
# see also: http://wiki.eclipse.org/Jetty/Howto/Configure_Connectors - maxIdleTime
# default: 30000 (30 sec)
#sewer.source.pixel.max_idle=30000

# Sets the number of connections, which if exceeded places this connector in a
# low resources state. This is not an exact measure as the connection count is
# averaged over the select sets. When in a low resources state, different idle
# timeouts can apply on connections. See low_resource_max_idle
# default: 500
#sewer.source.pixel.low_resource_conns=500

# Sets the period in ms that a connection is allowed to be idle when this there
# are more than low_resource_conns connections. This allows the server to rapidly
# close idle connections in order to gracefully handle high load situations
# default: 5000 (5 sec)
#sewer.source.pixel.low_resource_max_idle=5000


# Threshold after which keep-alive will be disabled for new connections.
# Set to 0 to disable this feature.
#
# note: this threshold should be set to total_max_conns/num_acceptors
# num_acceptors = (num_cpus+3)/4
# e.g., 1 (2 cpus), 2 (8 cpus)
#
# default: 0 (disabled)
#sewer.source.pixel.disable_keepalive_threshold=0

# reliableseq sink options

# how long to wait for remote stream (to HDFS) to open.
# if there is an outage, opening HDFS can block for up to 20 seconds by default.
# default: 5
#sewer.sink.secure.remote.timeout=5

# rotate at even time boundaries (HH:00 and/or HH:30).
# for example, roll(30) with this flag enabled will rotate at HH:00 and HH:30.
# default: false
sewer.sink.roll.even.boundaries=true

# RabbitMQ configs

rmq.exchange.name=Sewer exchange
rmq.exchange.type=topic
rmq.host.name=rabbit00
rmq.port.number=9999
#25672
rmq.routing.key=l.ghostery.com

#end of RabbitMQ
